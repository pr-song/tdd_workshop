# Todo
- 下端点と上端点を与えて閉区間を作成
- 閉区間から下端点と上端点を取得する

# 進め方
- 仕様を読み、分割する
- 失敗のテストを書く（メソッド未定義）
- プロダクトコードの該当のメソッドを書き、成功させる
- テストコード -> プロダクトコードをリファクタリングする
- dataProviderでテストケースを調整する

- [x] 整数の閉区間を表すクラスを作成する
    - [x] 下端点を取得するメソッドを定義する
    - [x] 上端点を取得するメソッドを定義する
    - [x] 下端点と上端点を指定できるコンストラクターを作成
        - [x] 下端点 > 上端点 -> エラー -> 例外を投げる ClosedRangeLogicException
        - [x] 下端点 = 上端点 -> OK
        - [x] 下端点 < 上端点 -> OK

- [x] 文字列表現 "[a,b]"
    - [x] 文字列変換のメソッドを定義する toString -> return string
    - [x] [3,8]の閉区間は"[3,8]"を返す

- [x] 帰属
    - [x] 閉区間が指定した整数を含むか判定するメソッドを定義する contains -> return bool
    - [x] [3,8]は 6 を含む
    - [x] [3,8]は 2 を含まない
    - [x] テストデータについて考える。例えば閉区間 "[3,8]" のとき、テストすべき数値はいくつあるでしょうか?

- [x] 等価性
    - [x] 閉区間が別の閉区間と等しいか (equals) 判定する - isEquals -> return bool
    - [x] [3,8] と [3,8]の場合は true
    - [x] [3,8] と [1,6]の場合は false

- [ ] 包含
    - [ ] 閉区間が別の閉区間に完全に含まれるか(contains)判定してみましょう isContainsOtherClosedRange -> return bool
    - [ ] [4,6] は [3,8] に含まれる
    - [ ] [1,10] は [3,8] に含まれない
